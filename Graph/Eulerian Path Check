Eulerian Path is a path in a graph that visits every edge exactly once. Eulerian Circuit is an Eulerian Path that starts and ends on the same vertex. Given the number of vertices v and adjacency list adj denoting the graph. Find that there exists the Euler circuit or not. Return 1 if there exist  alteast one eulerian circuit else 0.

Example 1:

Input: 
v = 4 
edges[] = {{0, 1}, 
           {0, 2}, 
           {1, 3}, 
           {2, 3}}

Output: 
1
Explanation: corresponding adjacency list will be {{1, 2},{0, 3},{0, 3},{1, 2}}
One of the Eularian circuit 
starting from vertex 0 is as follows:
0->1->3->2->0

Example 2:

Input: 
v = 3
edges[] = {{0, 1}, 
         {0, 2}}
         

Output: 
0
Explanation: corresponding adjacency list will be {{1, 2}}
No Eulerian path is found.

Your Task:
You don't need to read or print anything. Your task is to complete the function isEularCircuitExist() which takes v and array of edges adj[] as input parameter and returns boolean value 1 if Eular circuit exists otherwise returns 0.

Expected Time Complexity: O(v + e)
Expected Space Complexity: O(v)

Constraints:
1 <= v <= 105
1 <= edges <= 2*105

Solution-

To solve this problem and determine if an Eulerian Circuit exists in an Undirected Graph, we need to ensure two conditions are met:
1. All vertices have an even degree:
  Every vertex in the graph must have an even number of edges(degree). This is because, in an Eulerian circuit, each time we        visit a vertex, we need to enter and leave through an edge, so there must be an even number of edges.

2. The graph is connected:
   All vertices with atleast one edge must be part of the same connected component. This ensures that there is a path between        every pair of vertices that can be visited in the circuit.

If there's one connected component and one isolated vertex (with no edges), the graph can still have an Eulerian circuit, as long as the connected component with edges satisfies the conditions (even degree for all vertices and connectivity for all vertices with edges).

Approach:

    Check the degree of each vertex: If any vertex has an odd degree, return false immediately.
    Check if the graph is connected: We can do this using DFS or BFS to ensure all vertices with non-zero degree are connected.


import java.util.ArrayList;

class Solution {
    public boolean isEulerCircuitExist(int v, ArrayList<ArrayList<Integer>> adj) {
        // Step 1: Check if all vertices have even degree
        for (int i = 0; i < v; i++) {
            if (adj.get(i).size() % 2 != 0) {
                // If degree of any vertex is odd, return false
                return false;
            }
        }

        // Step 2: Check if the graph is connected
        // We'll use a DFS to check if all vertices with edges are connected
        boolean[] visited = new boolean[v];
        
        // Start DFS from any node with at least one edge (non-zero degree)
        int startNode = -1;
        for (int i = 0; i < v; i++) {
            if (adj.get(i).size() > 0) {
                startNode = i;
                break;
            }
        }

        if (startNode == -1) {
            // If no edges exist (empty graph or isolated vertices), it's trivially Eulerian (circuit doesn't exist)
            return false;
        }

        // Perform DFS to mark visited vertices
        dfs(startNode, adj, visited);

        // Check if all vertices with edges have been visited
        for (int i = 0; i < v; i++) {
            if (adj.get(i).size() > 0 && !visited[i]) {
                // If there's a vertex with edges that is not visited, the graph is disconnected
                return false;
            }
        }

        return true; // If both conditions are met
    }

    // Helper function for DFS
    private void dfs(int node, ArrayList<ArrayList<Integer>> adj, boolean[] visited) {
        visited[node] = true;
        for (int neighbor : adj.get(node)) {
            if (!visited[neighbor]) {
                dfs(neighbor, adj, visited);
            }
        }
    }
}
