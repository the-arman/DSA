Problem Description:-               
  
You are given an integer array nums. The absolute sum of a subarray [numsl, numsl+1, ..., numsr-1, numsr] is abs(numsl + numsl+1 + ... + numsr-1 + numsr).

Return the maximum absolute sum of any (possibly empty) subarray of nums.

Note that abs(x) is defined as follows:

    If x is a negative integer, then abs(x) = -x.
    If x is a non-negative integer, then abs(x) = x.
 
  

Example 1:

Input: nums = [1,-3,2,3,-4]
Output: 5
Explanation: The subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5. 

Example 2:

Input: nums = [2,-5,1,-4,3,-2]
Output: 8
Explanation: The subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8.

 

Constraints:

    1 <= nums.length <= 10^5
    -104 <= nums[i] <= 10^4


Solution-

Approach1- Greedy- Prefix Sum

Intuition-

A brute-force approach to solving this problem involves considering all possible subarrays of the given array and comparing their sums to find the one with the maximum absolute value. While this brute- force approach works, it requires repeatedly summing subarrays, making it computationally expensive. Instead of recalculating sums every time, we can optimize the process using prefix sums, a common technique for handling subarray problems efficiently.


The idea behind prefix sums is that if we precompute cumulative sums up to each index, we can quickly determine the sum of any subarray. The prefix sum at index i represents the total sum of elements from the beginning of the array up to i. This allows us to determine the sum of any subarray between indices l and r by taking the difference prefixSum[r] - prefixSum[l-1], eliminating the need for repeated summation.


We can apply this idea in the current problem by considering each index in the array nums as the endpoint of a potential subarray. One way to approach this is by checking the prefix sum at each index before it and determining the maximum sum. However, we can optimize this further usign a greedy approach.

- If the prefix sum at index i, denoted as prefixSum[i] is positive, we need to find the minimum prefix sum encountered so far. This is because we will maximize the sum of our subarray with a riht endpoint at i by finding the minimum prefix sum.

-Conversely, if prefixSum[i] is negative, we need to find the maximum prefix sum encountered so far. This is because when the prefix sum is negative, subtracting a positive value(the maximum prefix sum) will result in a larger negative difference, which will maximize our absolute sum.



With this in mind, we iterate through the array while maintaining a running prefix sum. As we process each element, we update the prefix sum by adding the current number.  To find the maximum possible subarray sum, we compute the difference between the current prefix sum and the smallest prefix seen so far. To find the maximum possible positive subarray sum, we compute the absolute difference between the current prefix sum and the largest prefix sum seen so far. Additionally, since a subarray can start at the very beginning of the array, we also compare the absolute value of the prefix sum itself against our current maximum absolute sum.

At each step, we update the smallest and largest prefix sums encountered so fart to ensure that they always store the minimum and maximum values upto the current index. By doing this, we guarantee that each index is processed only once.


Algorithm

    Initialize variables:
        minPrefixSum to the maximum possible integer (INT_MAX) — tracks the smallest prefix sum encountered so far.
        maxPrefixSum to the minimum possible integer (INT_MIN) — tracks the largest prefix sum encountered so far.
        prefixSum to 0 — stores the cumulative sum of the elements as we iterate through the array.
        maxAbsSum to 0 — stores the maximum absolute difference of prefix sums found so far.

    Iterate through the array and for each element nums[i] in the array:
        Add nums[i] to the prefixSum to calculate the cumulative sum up to the current index.
        Update minPrefixSum to the smaller of its current value and prefixSum.
        Update maxPrefixSum to the larger of its current value and prefixSum.

    Calculate maximum absolute sum:
        If the prefixSum is positive, update maxAbsSum with the larger of its current value or prefixSum - minPrefixSum or prefixSum.
        If the prefixSum is negative, update maxAbsSum with the larger of its current value or the abs(prefixSum - maxPrefixSum) or prefixSum.

    Return maxAbsSum.


Code-



class Solution {

    public int maxAbsoluteSum(int[] nums) {
        int minPrefixSum = Integer.MAX_VALUE, maxPrefixSum = Integer.MIN_VALUE;
        int prefixSum = 0, maxAbsSum = 0;

        for (int i = 0; i < nums.length; i++) {
            // Prefix sum from index 0 to i
            prefixSum += nums[i];

            // Minimum & Maximum prefix sum we have seen so far
            minPrefixSum = Math.min(minPrefixSum, prefixSum);
            maxPrefixSum = Math.max(maxPrefixSum, prefixSum);

            if (prefixSum >= 0) {
                // If the prefixSum is positive, we will get the difference between prefixSum &
                // minPrefixSum
                maxAbsSum = Math.max(
                    maxAbsSum,
                    Math.max(prefixSum, prefixSum - minPrefixSum)
                );
            } else if (prefixSum <= 0) {
                // If the prefixSum is negative, we will get the absolute difference between
                // prefixSum & maxPrefixSum
                maxAbsSum = Math.max(
                    maxAbsSum,
                    Math.max(
                        Math.abs(prefixSum),
                        Math.abs(prefixSum - maxPrefixSum)
                    )
                );
            }
        }

        return maxAbsSum;
    }
}

T.C.- O(N)
S.C.- 0(1)


Approach 2: Greedy - Prefix Sum - Shorter

Intuition-

This approach is similar to the previous one where we utilized a prefix sum array to calculate the sum of any subarray between two indices. I the earlier method, we considered each index as the endpoint of a subarray and computed the maximum possible sum by tracking the minimum and maximum prefix sums encountered up to that point.

To maximize the absolute subarray sum, we need to find two prefix sums- one that is as large as possible and another that is as small as possible. This is because the sum of any subarray between indices i and j can be expressed as prefixSum[j]-prefixSum[i]. The greater the difference between prefixSum[j] and the prefixSum[i], the larger the absolute sum of the subarray.  Thus, to maximise this difference, prefixSum[j] should be as large as possible, while prefixSum[i] should be as small as possible.

With this observation, we iterate through the array while keeping track of two values: minPrefixSum, which stores the smallest prefix sum encountered so far, and maxPrefixSum, which stores the largest prefix sum. As we process each element, we update these values accordingly. Once we have finished iterating, the absolute difference between maxPrefixSum and minPrefixSum gives us the maximum absolute subarray sum.

One important note is that, instead of initializing maxPrefixSum to INT_MIN as is commonly done, we initialize it to 0. This is because the empty subarray, which has a sum of 0, is a valid subarray. In cases where all elements in the array are negative, initializing maxPrefixSum to 0 ensures that it correctly reflects the scenario where no positive subarray sum exists.



Algorithm

    Initialize variables:
        minPrefixSum and maxPrefixSum are initialized to 0. These will track the minimum and maximum prefix sums encountered during the iteration.
        prefixSum is initialized to 0. This will store the cumulative sum as we iterate through the array.

    Loop through each element of the array nums:
        Add the current element nums[i] to prefixSum
        Update minPrefixSum to be the smaller of its current value and the current prefixSum
        Update maxPrefixSum to be the larger of its current value and the current prefixSum

    Return the value of maxPrefixSum - minPrefixSum


Code-

class Solution {

    public int maxAbsoluteSum(int[] nums) {
        int minPrefixSum = 0, maxPrefixSum = 0;
        int prefixSum = 0;

        for (int i = 0; i < nums.length; i++) {
            prefixSum += nums[i];

            minPrefixSum = Math.min(minPrefixSum, prefixSum);
            maxPrefixSum = Math.max(maxPrefixSum, prefixSum);
        }

        return maxPrefixSum - minPrefixSum;
    }
}

T.C. O(N)
S.C. 0(1)





