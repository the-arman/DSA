Problem Description-

Wave is given five integers k, l1, r1, l2, and r2. Wave wants you to help her count the number of ordered pairs (x,y)

such that all of the following are satisfied:

    l1≤x≤r1

.
l2≤y≤r2
.
There exists a non-negative integer n
such that yx=kn

    . 

Input

The first line contains an integer t
(1≤t≤104

) — the number of test cases.

The only line of each test case contains five integers k
, l1, r1, l2, and r2 (2≤k≤109,1≤l1≤r1≤109,1≤l2≤r2≤109

).
Output

For each test case, output the number of matching ordered pairs (x,y)

on a new line.
Example
Input
Copy

5
2 2 6 2 12
2 1 1000000000 1 1000000000
3 5 7 15 63
1000000000 1 5 6 1000000000
15 17 78 2596 20914861

Output
Copy

12
1999999987
6
1
197

Note

In the third test case, the matching ordered pairs are the following:

    (5,15)

(5,45)
(6,18)
(6,54)
(7,21)
(7,63)

In the fourth test case, the only valid ordered pair is (1,1000000000)


Solution Code-

import java.util.*;
import java.io.*;

public class insaneproblem {
    public static void main(String[] args) throws IOException {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));
        int t=Integer.parseInt(br.readLine());
        while(t-->0){
            String[] ss=br.readLine().split(" ");
            int k=Integer.parseInt(ss[0]), l1=Integer.parseInt(ss[1]), r1=Integer.parseInt(ss[2]), l2=Integer.parseInt(ss[3]), r2=Integer.parseInt(ss[4]);
            long ans=0;
            for(int i=0;i<=(int)(Math.log(r2)/Math.log(k));i++){
                int num=(int)Math.pow(k, i);

                int lo=l1, hi=r1+1;
                while(lo<hi){
                    int mid=lo+(hi-lo)/2;
                    if(mid*(long)num>=l2)hi=mid;
                    else lo=mid+1;
                }
                int lower_bound=lo;
                lo=l1; hi=r1+1;
                while(lo<hi){
                    int mid=lo+(hi-lo)/2;
                    if(mid*(long)num>r2)hi=mid;
                    else lo=mid+1;

                }
                int upper_bound=lo-1;
                ans=ans+upper_bound-lower_bound+1;
            }
            bw.write(ans+"\n");
        }


        bw.close();
        br.close();
    }
}
