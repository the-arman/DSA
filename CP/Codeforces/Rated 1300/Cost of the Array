Problem Description-

You are given an array a of length n and an even integer k (2≤k≤n). You need to split the array a into exactly k non-empty subarrays† such that each element of the array a

belongs to exactly one subarray.

Next, all subarrays with even indices (second, fourth, …
, k-th) are concatenated into a single array b. After that, 0 is added to the end of the array b

.

The cost of the array b
is defined as the minimum index i such that bi≠i. For example, the cost of the array b=[1,2,4,5,0] is 3, since b1=1, b2=2, and b3≠3. Determine the minimum cost of the array b that can be obtained with an optimal partitioning of the array a

into subarrays.

†
An array x is a subarray of an array y if x can be obtained from y

by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.
Input

Each test consists of multiple test cases. The first line contains a single integer t
(1≤t≤104

) — the number of test cases. The description of the test cases follows.

The first line of each test case contains two integers n
and k (2≤k≤n≤2⋅105, k is even) — the length of the array a

and the number of subarrays.

The second line of each test case contains n
integers a1,a2,…,an (1≤ai≤109) — the elements of the array a

.

It is guaranteed that the sum of n
over all test cases does not exceed 2⋅105

.
Output

For each test case, output a single integer — the minimum cost of the array b

that can be obtained.
Example
Input
Copy

4
3 2
1 1 1
8 8
1 1 2 2 3 3 4 4
5 4
1 1 1 2 2
5 4
1 1 1000000000 2 2

Output
Copy

2
5
2
1

Note

In the first test case, there are only two possible partitionings: [[1],[1,1]]
and [[1,1],[1]]. In either case, b1=1, and b2≠2, so the cost is 2

.

In the second test case, there is only one possible partitioning, where b=[1,2,3,4,0]
, so the cost is 5 (b5=0≠5

).

In the third test case, the following partitioning works: [[1],[1,1],[2],[2]]
. Then b=[1,1,2,0], and the cost is 2.

Code-

import java.io.*;
public class cost_of_the_array {
    public static void main(String[] args) throws IOException{
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));
        int t=Integer.parseInt(br.readLine());
        while(t-->0){
            String[] s1=br.readLine().split(" ");
            int n=Integer.parseInt(s1[0]), k=Integer.parseInt(s1[1]);
            String[] s2=br.readLine().split(" ");
            int[] a=new int[n];
            for(int i=0;i<n;i++)a[i]=Integer.parseInt(s2[i]);
            int idx=n+1-k;
            if(idx==1){
                int p=1;
                for(int i=1;i<n;i+=2){
                    if(a[i]==p){
                        p++;
                    }
                    else{
                       break;
                    }
                }
                bw.write(p+"\n");
            }
            else{
                boolean b=true;
                for(int i=1;i<=idx;i++){
                        if(a[i]!=1){
                            b=false;
                            break;
                        }
                }
                if(!b)bw.write(1+"\n");
                else bw.write(2+"\n");
            }
            bw.flush();
        }
        bw.close();
        br.close();
    }
}
