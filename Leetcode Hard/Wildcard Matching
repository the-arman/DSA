Problem Description-

Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:

    '?' Matches any single character.
    '*' Matches any sequence of characters (including the empty sequence).

The matching should cover the entire input string (not partial).

 

Example 1:

Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".

Example 2:

Input: s = "aa", p = "*"
Output: true
Explanation: '*' matches any sequence.

Example 3:

Input: s = "cb", p = "?a"
Output: false
Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.

 

Constraints:

    0 <= s.length, p.length <= 2000
    s contains only lowercase English letters.
    p contains only lowercase English letters, '?' or '*'.



Solution-

class Solution {
    public boolean isMatch(String s, String p) {
        int m=s.length(), n=p.length();
       StringBuilder sb=new StringBuilder();
       for(int i=0;i<n;i++){
        if(p.charAt(i)!='*'){sb.append(p.charAt(i));continue;}
        int j=i;
        while(j<n && p.charAt(j)=='*'){j++;}sb.append('*');
        i=j-1;
       }
       p=sb.toString();
       System.out.println(s);
       n=p.length();
        int[][] dp=new int[m][n];
        for(int[] d:dp)Arrays.fill(d, -1);
        return help(s, p, 0, 0, m, n, dp)==1?true:false;
    }
    int help(String s, String p, int i, int j, int m, int n, int[][] dp){
        if(i==m && j==n)return 1;
        if(j==n-1 && p.charAt(j)=='*'){
            if(i<m)return dp[i][j]=1;
            return 1;
        }
        if(i==m || j==n)return 0;
        if(dp[i][j]!=-1)return dp[i][j];
        if(p.charAt(j)=='*'){
            for(int l=i-1;l<m;l++){
                if(help(s, p, l+1, j+1, m, n, dp)==1){dp[i][j]=1;break;}
            }
            return dp[i][j]==1?1:0;
        }
        else if(p.charAt(j)=='?'){
            return dp[i][j]=help(s, p, i+1, j+1, m, n, dp);}

    
                if(s.charAt(i)==p.charAt(j))return dp[i][j]=help(s, p, i+1, j+1, m, n, dp);
                return dp[i][j]=0;
         
    }
}
