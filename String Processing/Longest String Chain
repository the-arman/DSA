Problem Description

You are given an array of words where each word consists of lowercase English letters.
wordA is a predecessor of wordB if and only if we can insert exactly one letter anywhere in wordA without changing the order of the other characters to make it equal to wordB. For example, "abc" is a predecessor of "abac", while "cba" is not a predecessor of "bcad".

A word chain is a sequence of words [word1, word2, ..., wordk] with k >= 1, where word1 is a predecessor of word2, word2 is a predecessor of word3, and so on. A single word is trivially a word chain with k = 1.

Return the length of the longest possible word chain with words chosen from the given list of words in any order.

Examples:

Input: words[] = ["ba", "b", "a", "bca", "bda", "bdca"]
Output: 4
Explanation: One of the longest word chains is ["a", "ba", "bda", "bdca"].

Input: words[] = ["abc", "a", "ab"]
Output: 3
Explanation: The longest chain is {"a", "ab" "abc"}

Input: words[] = ["abcd", "dbqca"]
Output: 1
Explanation: The trivial word chain ["abcd"] is one of the longest word chains.

Constraint:
1 <= words.length <= 104
1 <= words[i].length <= 10
 words[i] only consists of lowercase English letters.

Editorial

The following is a GFG article that can be used to understand the concepts used in this problem. It may or may not be exactly applicable to the problem statement given here.

Given an array of words where each word consists of lowercase English letters, we need to find the longest word chain possible.

A word wordA is a predecessor of wordB if and only if we can insert exactly one letter anywhere in wordA without changing the order of the other characters to make it equal to wordB.
For example, "abc" is a predecessor of "abac", while "cba" is not a predecessor of "bcad".

A word chain is a sequence of words [word1, word2, ..., wordk] with k ≥ 1, where:

    word1 is a predecessor of word2
    word2 is a predecessor of word3, and so on.

A single word is trivially a word chain with k = 1.

The task is to return the length of the longest possible word chain with words chosen from the given list of words in any order.

Examples:

    Input: words = ["ba", "b", "a", "bca", "bda", "bdca"]
    Output: 4
    Explanation: One of the longest word chains is ["a", "ba", "bda", "bdca"].

    Input: words = ["abcd", "dbqca"]
    Output: 1
    Explanation: The trivial word chain ["abcd"] is one of the longest word chains.

[Naive Approach] Using Recursion - Exponential Time

If we take a closer look, we can notice that this problem is a variation of Longest Increasing Subsequence Problem. For every word, we find the longest chain ending with it. At the end, we return the maximum of all longest chains.

1. Consider every word w one by one
2. Find the length of the longest chain where w is the last word (or longest word). We compute this using a recursive function longestEndCurr().
3. Return the maximum of all values obtained in step 2.


Solution Code-

// Java code for Longest String Chain
// using Recursion
import java.util.Arrays;

public class GfG {

    // Function to check if b can be obtained by removing 
    // one character from a
    static boolean isPred(String a, String b) {
        if (a.length() != b.length() + 1) return false;
        int i = 0, j = 0;
        
        // Compare characters of both strings
        while (i < a.length() && j < b.length()) {
            if (a.charAt(i) == b.charAt(j)) { 
                i++; 
                j++; 
            } else { 
                i++; // Skip one character in a
            }
        }
        return (j == b.length());
    }

    // Recursive function to find the longest chain that 
    // ends with the given word 'curr'
    static int longestEndCurr(String[] words, String curr) {
        int maxEnd = 1;
        
        // Check for all words in the array
        for (String w : words) {
            if (isPred(curr, w)) {
                // Recursively find the longest chain
                maxEnd = Math.max(maxEnd, 1 + longestEndCurr(words, w));
            }
        }
        return maxEnd;
    }

    // Function to find the length of the longest string chain
    static int longestStringChain(String[] words) {
        int res = 1;
        
        // Find the longest chain ending at each word
        for (String w : words) {
            res = Math.max(res, longestEndCurr(words, w));
        }
        return res;
    }

    // Driver code
    public static void main(String[] args) {
        String[] s = {"a", "b", "ba", "bca", "bda", "bdca"};
        
        // Print the length of the longest string chain
        System.out.println(longestStringChain(s));
    }
}


[Better Approach] Using DP(Tabulation) - O(nlogn + n²m) Time and O(n) Space

    The idea is to build the longest possible word chain by checking if a word can be formed by adding one letter to a shorter word.

    First, we sort the words by length to ensure that we process shorter words first. We use a dp array, where dp[i] stores the longest chain ending at words[i].

    For each word, we check all previous words to see if they are its predecessor (by removing one character). If a valid predecessor is found, we update dp[i] accordingly. The maximum value in dp gives the longest string chain.

Below is the implementation of the above approach:

// Java code for Longest String Chain
// using Tabulation (Bottom-Up DP)
import java.util.*;

class GfG {
    
    // Function to check if b is a predecessor of a
    private static boolean isPred(String a, String b) {
        if (a.length() != b.length() + 1) {
            return false;
        }
        int i = 0, j = 0;
        while (i < a.length() && j < b.length()) {
            if (a.charAt(i) == b.charAt(j)) {
                i++;
                j++;
            } else {
                i++;
            }
        }
        return j == b.length();
    }

    // Function to find the longest string chain using DP
    public static int longestStringChain(String words[]) {
        
        // Sort words based on length
        Arrays.sort(words, Comparator.comparingInt(String::length));

        int n = words.length;
        int dp[] = new int[n];
        Arrays.fill(dp, 1);
        int res = 1;

        // Iterate over each word
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (isPred(words[i], words[j])) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
            res = Math.max(res, dp[i]);
        }
        return res;
    }

    // Driver code
    public static void main(String[] args) {
        String words[] = { "a", "b", "ba", "bca", "bda", "bdca" };
        System.out.println(longestStringChain(words));
    }
}


Time Complexity: O(nlogn + n²m), as sorting takes O(n log n), and checking predecessors takes O(n^2 * m), where n is the number of words and m is the maximum word length.
Auxiliary Space: O(n), as the dp array stores one value per word, requiring O(n) space.
[Expected Approach] DP + Hashing- O(nlogn + n*m²) Time and O(n*m) Space

    Using dynamic programming, we store the longest chain length for each word in a hash table. For each word, we generate possible predecessors by removing one character and check if they exist in the table. If a valid predecessor is found, we update the chain length, ensuring we track the longest possible chain efficiently.

Steps to implement the above idea:

    Sort the words by length to process shorter words first.
    Use a DP table (array or map) to store the longest chain length for each word.
    Iterate through each word and initialize its chain length to 1.
    Generate predecessors by removing one character at a time.
    Check if the predecessor exists in the DP table and update the chain length.
    Track the maximum chain length found and return the result.

Below is the implementation of the above approach:

// Java code for Longest String Chain
// using DP + Hashing
import java.util.Arrays;
import java.util.HashMap;

class GfG {
    
    // Custom comparator to sort strings by length
    public static int longestStringChain(String[] words) {
        
        // Sort words by length
        Arrays.sort(words, (a, b) -> a.length() - b.length());
        
        // HashMap to store the maximum chain length for each word
        HashMap<String, Integer> dp = new HashMap<>();
        
        int res = 1;
        
        // Iterate through each word in the sorted array
        for (String w : words) {
            dp.put(w, 1); // Initialize length for current word
            
            // Try removing one character at a time
            for (int i = 0; i < w.length(); i++) {
                String pred = w.substring(0, i) + w.substring(i + 1);
                if (dp.containsKey(pred)) {
                    dp.put(w, Math.max(dp.get(w), dp.get(pred) + 1));
                }
            }
            
            res = Math.max(res, dp.get(w));
        }
        
        return res;
    }
    
    // Driver code
    public static void main(String[] args) {
        String[] words = {"a", "b", "ba", "bca", "bda", "bdca"};
        System.out.println(longestStringChain(words));
    }
}

Output

4

Time Complexity: O(nlogn + n*m²), where n is the number of words and m is the maximum word length (sorting takes O(n * log n), and checking predecessors takes O(n*m²).
Auxiliary Space: O(n*m), as we store n words in the DP table, each of length up to m.
