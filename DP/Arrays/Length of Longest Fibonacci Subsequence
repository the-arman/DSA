A sequence x1, x2, ..., xn is Fibonacci-like if:

    n >= 3
    xi + xi+1 == xi+2 for all i + 2 <= n

Given a strictly increasing array arr of positive integers forming a sequence, return the length of the longest Fibonacci-like subsequence of arr. If one does not exist, return 0.

A subsequence is derived from another sequence arr by deleting any number of elements (including none) from arr, without changing the order of the remaining elements. For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].

 

Example 1:

Input: arr = [1,2,3,4,5,6,7,8]
Output: 5
Explanation: The longest subsequence that is fibonacci-like: [1,2,3,5,8].

Example 2:

Input: arr = [1,3,7,11,12,14,18]
Output: 3
Explanation: The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18].

 

Constraints:

    3 <= arr.length <= 1000
    1 <= arr[i] < arr[i + 1] <= 109

Solution-

Intuition-

In a Fibonacci- like sequence, each number depends on the two numbers that came before it. This suggests that if we know the length of a Fibonacci like sequence endig with two particular numbers, we can use that information to find loner sequences that might include these numbers. This aspect of building larger sequences from information collected from larger ones suggests a dynamic programming approach.


To structure this approach, we define a 2D dp array dp, where dp[i][j] represents the length of the longest Fibonacci-like sequence that ends with arr[i] and arr[j]. The indices i and j corresponds to positions in our input array, with j always greater than 1 to maintain the strictly increasing order of the sequence/

The key idea is to determine whether a sequence ending in arr[i] and arrj[] can be extended. If these are the last two numbers of our sequx
