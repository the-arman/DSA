Given an array arr[]  containing non-negative integers, the task is to divide it into two sets set1 and set2 such that the absolute difference between their sums is minimum and find the minimum difference.

Examples:

Input: arr[] = [1, 6, 11, 5]
Output: 1
Explanation: 
Subset1 = {1, 5, 6}, sum of Subset1 = 12 
Subset2 = {11}, sum of Subset2 = 11 
Hence, minimum difference is 1.  

Input: arr[] = [1, 4]
Output: 3
Explanation: 
Subset1 = {1}, sum of Subset1 = 1
Subset2 = {4}, sum of Subset2 = 4
Hence, minimum difference is 3.

Input: arr[] = [1]
Output: 1
Explanation: 
Subset1 = {1}, sum of Subset1 = 1
Subset2 = {}, sum of Subset2 = 0
Hence, minimum difference is 1.

Constraints:
1 ≤ arr.size()*|sum of array elements| ≤ 105
1 <= arr[i] <= 105

Solution-

1. Recursion + memoization-
    In this problem, we are going to use recursion and memoization. At each recursive call, we have two chocies to be made, either to include the last element or exclude it.
    Base case:- if(n==0)return Math.abs((totalSum-calculedSum)-calculatedSum)
    DP state:- dp[n][calculatedSum]

Code:-
    class Solution {

    public int minDifference(int arr[]) {
        // Your code goes here
        int totalSum=0;
        for(int i:arr)totalSum+=i;
        int n=arr.length;
        int[][] dp=new int[n+1][totalSum+1];
        for(int[] d:dp)Arrays.fill(d, -1);
        return help(arr, n-1, 0, dp, totalSum);
    }
    int help(int[] arr, int n, int calculatedSum, int[][] dp, int totalSum){
        if(n==-1){
            return Math.abs((totalSum-calculatedSum)-calculatedSum);
        }
        if(dp[n][calculatedSum]!=-1)return dp[n][calculatedSum];
        int include=help(arr, n-1, arr[n]+calculatedSum, dp, totalSum );
        int exclude=help(arr, n-1, calculatedSum, dp, totalSum);
        return dp[n][calculatedSum]=Math.min(include, exclude);
    }
}

T.C.- O(n*totalSum)
S.C.- O(n*totalSum)

2. Bottom Up DP-

    class Solution{
    public int minDifference(int[] arr){
    int n=arr.length, total=0;
    for(int i:arr)total+=i;
    int[][] dp=new int[n+1][total+1];
    for(int i=0;i<=total;i++)dp[0][i]=Math.abs(total-2*i);
    for(int i=1;i<=n;i++){
            for(int j=0;j<=total;j++){
                   // If we don't include arr[i-1], the dp value is the same as the previous row
                dp[i][j] = dp[i - 1][j];

                // If we include arr[i-1], check the dp value for the remaining sum
                if (j >= arr[i - 1]) {
                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j - arr[i - 1]]);
                }}
        }
    return dp[n][total];
      }
        }


T.C.- O(n*totalSum)
S.C.- O(n*totalSum)
