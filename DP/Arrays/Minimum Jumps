Problem Description-

You are given an array arr[] of non-negative numbers. Each number tells you the maximum number of steps you can jump forward from that position.

For example:

    If arr[i] = 3, you can jump to index i + 1, i + 2, or i + 3 from position i.
    If arr[i] = 0, you cannot jump forward from that position.

Your task is to find the minimum number of jumps needed to move from the first position in the array to the last position.

Note:  Return -1 if you can't reach the end of the array.

Examples : 

Input: arr[] = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9]
Output: 3 
Explanation: First jump from 1st element to 2nd element with value 3. From here we jump to 5th element with value 9, and from here we will jump to the last. 

Input: arr = [1, 4, 3, 2, 6, 7]
Output: 2 
Explanation: First we jump from the 1st to 2nd element and then jump to the last element.

Input: arr = [0, 10, 20]
Output: -1
Explanation: We cannot go anywhere from the 1st element.

Constraints:
2 ≤ arr.size() ≤ 104
0 ≤ arr[i] ≤ 104

[Naive Approach] - Using Recursion - O(n ^ n) Time and O(n) Space

The idea is to recursively generate all possible way of reaching the end of the array and find the one with the minimum steps required. To do so, start from the first element and for each element arr[i] recursively call for all the elements reachable from that element (i.e. i + arr[i]) and return the one with the minimum steps required.

    Start from the first element and recursively call for all the elements reachable from the first element. The minimum number of jumps to reach end from first can be calculated using the minimum value from the recursive calls. 

    minJumps(start, end) = 1 + Min(minJumps(k, end)) for all k reachable from start.

#include <bits/stdc++.h>
using namespace std;

int minJumpsRecur(int i, vector<int> &arr) {
    
    // Return 0 when last element is reached.
    if (i >= arr.size()-1)
        return 0;

    // Traverse through all the points
    // reachable from arr[i].
    // Recursively, get the minimum number
    // of jumps needed to reach array end from
    // these points.
    int ans = INT_MAX;
    for (int j=i+1; j<=i+arr[i]; j++) {
        int val = minJumpsRecur(j, arr);
        if (val != INT_MAX)
            ans = min(ans, 1+val);
    }

    return ans;
}

// Function to return the minimum number
// of jumps to reach arr[h] from arr[l]
int minJumps(vector<int>& arr) {

    int ans =  minJumpsRecur(0, arr);
    
    // If end cannot be reached.
    if (ans == INT_MAX) 
        return -1;
        
    return ans;
}

Output

3

[Better Approach 1] - Using Top-Down DP (Memoization) - O(n^2) Time and O(n) Space

    The above approach can be optimized using memoization to avoid computing the overlapping subproblems multiple times. For example in array, arr[] = {1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9} minJumps(3, 9) will be called two times as arr[3] is reachable from arr[1] and arr[2].
    So this problem has both properties (optimal substructure and overlapping subproblems) of Dynamic Programming.
    To do so, create an array memo[] of size n, where each element memo[i] stores the minimum steps required to reach end of array from index i.
    For each recursive call, check if subproblem is already calculated, if so return the stored value, else operate similar to above approach.

#include <bits/stdc++.h>
using namespace std;

int minJumpsRecur(int i, vector<int> &arr, vector<int> &memo) {
    
    // Return 0 when last element is reached.
    if (i == arr.size()-1)
        return 0;
        
    // If value for current index is memoized,
    // then return it.
    if (memo[i] != -1) return memo[i];

    // Traverse through all the points
    // reachable from arr[i].
    // Recursively, get the minimum number
    // of jumps needed to reach array end from
    // these points.
    int ans = INT_MAX;
    for (int j=i+1; j<=i+arr[i] && j<arr.size(); j++) {
        int val = minJumpsRecur(j, arr, memo);
        if (val != INT_MAX)
            ans = min(ans, 1+val);
    }
    
    // Memoize the value and 
    // return it.
    return memo[i] = ans;
}

// Function to return the minimum number
// of jumps to reach arr[h] from arr[l]
int minJumps(vector<int>& arr) {
    
    // array to memoize values
    vector<int> memo(arr.size(), -1);
    
    int ans =  minJumpsRecur(0, arr, memo);
    
    // If end cannot be reached.
    if (ans == INT_MAX) 
        return -1;
        
    return ans;
}

Output

3

[Better Approach 2] - Using Bottom-Up DP (Tabulation) - O(n^2) Time and O(n) Space

    The above approach can further be optimized using bottom-up dp (tabulation) to minimize the space required for recursive stack. To do so, create an array dp[] of size n, where each element dp[i] stores the minimum steps required to reach end of array from index i. Start from the last index i.e. n-1, and for each index i compute the minimum steps for subarray i to n-1 and store the result in dp[i].

#include <bits/stdc++.h>
using namespace std;

// Function to return the minimum number
// of jumps to reach arr end.
int minJumps(vector<int> &arr) {
    int n = arr.size();

    // array to memoize values
    vector<int> dp(n, INT_MAX);
    dp[n - 1] = 0;

    for (int i = n - 2; i >= 0; i--) {
        for (int j = i + 1; j <= i + arr[i] && j < n; j++) {
            if (dp[j] != INT_MAX) {
                dp[i] = min(dp[i], 1 + dp[j]);
            }
        }
    }

    // If end cannot be reached.
    if (dp[0] == INT_MAX)
        return -1;

    return dp[0];
}

Output

3

[Expected Approach] - Using Greedy Approach - O(n) Time and O(1) Space

    The idea is to use greedy approach to find the minimum jumps needed to reach the end of an array. We iterate through the array and maintain two values: the maximum reachable index and the current reachable index and update them based on the array elements.


Follow the steps below to solve the problem:

    Initialize the variables maxReach = 0, currReach = 0, and jump = 0 to keep track of the maximum reachable index, the current reachable index at the ith position, and the number of jumps taken to reach the current reachable index, respectively.
    Traverse the array and update the maximum reachable index based on the sum of the current index and its corresponding array value. This helps determine how far the current jump can take us.
    If the current index is equal to the current reachable index, then a jump is required. We choose our jump in such a way that it takes us to the maximum possible index. Increment jump by 1 and update currReach to maxReach.
    If the current index is equal to the maximum reachable index, it indicates that we cannot move beyond this point, so return -1.


// C++ program to count Minimum number
// of jumps to reach end
#include <iostream>
#include <vector>
using namespace std;

int minJumps(vector<int>& arr) {
      int n = arr.size();

    // Return -1 if not possible to jump
    if (arr[0] == 0)
        return -1;

    // Stores the maximal reachable index
    int maxReach = 0;

    // stores the number of steps  we can still take
    int currReach = 0;

    // stores the number of jumps needed 
      // to reach current reachable index
    int jump = 0;

    // Start traversing array
    for (int i = 0; i < n; i++) {
          maxReach = max(maxReach, i+arr[i]);
      
          // If we can reach last index by jumping 
          // from current position return Jump + 1
          if (maxReach >= n-1) {
              return jump + 1;
        }
      
          // Increment the Jump as we reached the 
          // Current Reachable index
          if (i == currReach) {
          
              // If Max reach is same as current index
              // then we can not jump further
              if (i == maxReach) {
                  return -1;
              }
          
              // If Max reach > current index then increment 
              // jump and update current reachable index 
              else {
                jump++;    
                currReach = maxReach;
            }
        }
    }
  
    return -1;
}


Time complexity: O(n), Only one traversal of the array is needed.
Auxiliary Space: O(1), There is no extra space required.
