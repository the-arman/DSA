Problem Description-

Given an array of integers cost[] where cost[i] is the cost of the ith step on a staircase. Once the cost is paid, you can either climb one or two steps. Return the minimum cost to reach the top of the floor.
Assume 0-based Indexing. You can either start from the step with index 0, or the step with index 1.

Examples:

Input: cost[] = [10, 15, 20]
Output: 15
Explanation: Cheapest option is to start at cost[1], pay that cost, and go to the top.



Input: cost[] = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]
Output: 6
Explanation: Cheapest option is to start on cost[0], and only step on 1s, skipping cost[3].

Constraints:
2 ≤ cost.size() ≤ 105
0 ≤ cost[i] ≤ 999

Solution Code-

class Solution {
  public:
    int minCostClimbingStairs(vector<int>& cost) {
        // Write your code here
        int n=cost.size();
        vector<int> dp(n+1, -1);
        int a=help(cost, 0, dp, 0);
        fill(dp.begin(), dp.end(), -1);
        int b=help(cost, 1, dp, 0);
        return min(a, b);
        }
    int help(vector<int>& cost, int i, vector<int>& dp, int cur){
                int n=cost.size();

        if(i==n)return cur;
        if(dp[i]!=-1)return dp[i];
        int a=(i+1<=n)?help(cost, i+1, dp, cur):INT_MAX;
        int b=(i+2<=n)?help(cost, i+2, dp, cur):INT_MAX;
        return dp[i]=cost[i]+min(a,b);
    }
};
