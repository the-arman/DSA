Problem Description-

There are n stairs, a person standing at the bottom wants to reach the top. The person can climb either 1 stair or 2 stairs at a time. Your task is to count the number of ways, the person can reach the top (order does matter).

Examples:

Input: n = 1
Output: 1
Explanation: There is only one way to climb 1 stair. 

Input: n = 2
Output: 2
Explanation: There are 2 ways to reach 2th stair: {1, 1} and {2}.  

Input: n = 4
Output: 5
Explanation: There are five ways to reach 4th stair: {1, 1, 1, 1}, {1, 1, 2}, {2, 1, 1}, {1, 2, 1} and {2, 2}.

Constraints:
1 ≤ n ≤ 44

Solution Code-

class Solution {
  public:
    int countWays(int n) {
        // your code here
        vector<int> dp(n+1, -1);
        return help(dp, n);
    }
    int help(vector<int> &dp, int n){
        if(n==0)return dp[n]=1;
        if(dp[n]!=-1)return dp[n];
        int x=0, y=0;
        x=(n-1>=0)?help(dp, n-1):0;
        y=(n-2>=0)?help(dp, n-2):0;
        return dp[n]=x+y;
    }
};

T.C. o(n)
s.c. o(n)
