In C++ , you can declare and initialize lists, tuples, and sets in the following ways:   
1. List (using std::list):         

A list in C++ is part of the Standard Template Library (STL) and is implemented as a doubly linked list.

#include <iostream> 
#include <list> 
    
int main() {  
    // Declare and initialize an empty list
    std::list<int> myList;

    // Declare and initialize a list with some values
    std::list<int> myList2 = {1, 2, 3, 4, 5};

    // Output the contents
    for (int num : myList2) {
        std::cout << num << " ";
    }
    return 0;
}

2. Tuple (using std::tuple):

A tuple can hold elements of different types.

#include <iostream>
#include <tuple>

int main() {
    // Declare and initialize a tuple
    std::tuple<int, double, std::string> myTuple = {1, 3.14, "Hello"};

    // Access tuple elements using std::get
    std::cout << "First element: " << std::get<0>(myTuple) << std::endl;
    std::cout << "Second element: " << std::get<1>(myTuple) << std::endl;
    std::cout << "Third element: " << std::get<2>(myTuple) << std::endl;

    return 0;
}

3. Set (using std::set):

A set is an ordered collection of unique elements, implemented in C++ as part of STL.

#include <iostream>
#include <set>

int main() {
    // Declare and initialize an empty set
    std::set<int> mySet;

    // Declare and initialize a set with some values
    std::set<int> mySet2 = {5, 3, 8, 1};

    // Output the contents of the set (automatically sorted)
    for (int num : mySet2) {
        std::cout << num << " ";
    }

    return 0;
}

Key Notes:

    List: A std::list is a doubly linked list, which allows efficient insertion/removal at both ends.
    Tuple: A std::tuple can hold elements of different types, unlike arrays or vectors which hold elements of the same type.
    Set: A std::set automatically sorts the elements and does not allow duplicates.

You can declare and initialize them as shown, and manipulate them using the appropriate methods for each data structure.
