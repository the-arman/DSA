Problem Statement-

Given an array of integers arr[], the task is to find the maximum of the minimum values for every possible window size in the array, where the window size ranges from 1 to arr.size().

More formally, for each window size k, determine the smallest element in all windows of size k, and then find the largest value among these minimums where 1<=k<=arr.size().

Examples :

Input: arr[] = [10, 20, 30, 50, 10, 70, 30]
Output: [70, 30, 20, 10, 10, 10, 10] 
Explanation: 
1. First element in output indicates maximum of minimums of all windows of size 1. Minimums of windows of size 1 are [10], [20], [30], [50], [10], [70] and [30]. Maximum of these minimums is 70. 
2. Second element in output indicates maximum of minimums of all windows of size 2. Minimums of windows of size 2 are [10], [20], [30], [10], [10], and [30]. Maximum of these minimums is 30. 
3. Third element in output indicates maximum of minimums of all windows of size 3. Minimums of windows of size 3 are [10], [20], [10], [10] and [10]. Maximum of these minimums is 20. 
Similarly other elements of output are computed.

Input: arr[] = [10, 20, 30]
Output: [30, 20, 10]
Explanation: First element in output indicates maximum of minimums of all windows of size 1. Minimums of windows of size 1 are [10] , [20] , [30]. Maximum of these minimums are 30 and similarly other outputs can be computed

Constraints:
1 <= arr.size() <= 105
1 <= arr[i] <= 106


Solution-

[Naive Approach] - O(n^3) Time and O(1) Space

The idea is to calculate the minimum of every window separately and print the maximum of each window size

class Solution{

static ArrayList<Integer> maxOfMins(int[] arr){
int n=arr.length;
ArrayList<Integer> res=new ArrayList<>(Collections.nCopies(n, 0));
for(int k=1; k<=n; k++){
int maxOfMin=Integer.MIN_VALUE;
 for (int i = 0; i <= n - k; i++) {

                // Find minimum of current window
                int minVal = arr[i];
                for (int j = 1; j < k; j++) {
                    if (arr[i + j] < minVal)
                        minVal = arr[i + j];
                }

                // Update maxOfMin if required
                if (minVal > maxOfMin)
                    maxOfMin = minVal;
            }

            // Store max of min for current window size
            res.set(k - 1, maxOfMin);
        }

        return res;
    }}


[Expected Approach] Using Stack - O(n) Time and O(n) Space


The idea is to find the next smaller and previous smaller of each element and update the maximum of window with size as the difference in their indices. The problem is mainly a variation of Largest Area in a Histogram.

Implementation-

1. Initialize res[] to store maximum minimums and len[] to store window sizes. Use a stack s for efficient processing.
2. Traverse the array to determine window sizes. For each element pop larger or eual elements from the stack, calculate their window    size, and update len[]. Push the current index onto the stack.
3.  Process remaining stack elements to determine their window sizes using the right boundary.
4. Populate res[] using len[] and arr[], storing the maximum minimum for each window size.
5. Update res[] to ensure values correctly reflect the maximum of the minimums.
7. Return res[], containing the maximum of minimums for every window size.


Code-

class Solution {
    static ArrayList<Integer> maxOfMins(int[] arr) {
        int n = arr.length;
        ArrayList<Integer> res = new ArrayList<>(Collections.nCopies(n, 0));
        Stack<Integer> s = new Stack<>();

        // Array to store the length of the window 
        // where each element is the minimum
        ArrayList<Integer> lenArr = new ArrayList<>(Collections.nCopies(n, 0));

        // Traverse through array to determine 
        // window sizes using a stack
        for (int i = 0; i < n; i++) {
            // Process elements to find next smaller 
            // element on the left
            while (!s.isEmpty() && arr[s.peek()] >= arr[i]) {
                int top = s.pop();
                int windowSize = s.isEmpty() ? i : i - s.peek() - 1;
                lenArr.set(top, windowSize);
            }
            s.push(i);
        }

        // Process remaining elements in the stack
        // for right boundaries
        while (!s.isEmpty()) {
            int top = s.pop();
            int windowSize = s.isEmpty() ? n : n - s.peek() - 1;
            lenArr.set(top, windowSize);
        }

        // Fill ressult based on lenArr[] and arr[]
        for (int i = 0; i < n; i++) {
            int windowSize = lenArr.get(i) - 1;  // 0-based indexing
            res.set(windowSize, Math.max(res.get(windowSize), arr[i]));
        }

        // Fill remaining entries in res[] to ensure 
        // all are max of min
        for (int i = n - 2; i >= 0; i--)
            res.set(i, Math.max(res.get(i), res.get(i + 1)));

        return res;
    }
}
