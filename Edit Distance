Edit Distance
Difficulty: HardAccuracy: 35.14%Submissions: 226K+Points: 8

Given two strings s1 and s2. Return the minimum number of operations required to convert s1 to s2.
The possible operations are permitted:

    Insert a character at any position of the string.
    Remove any character from the string.
    Replace any character from the string with any other character.

Examples:

Input: s1 = "geek", s2 = "gesek"
Output: 1
Explanation: One operation is required, inserting 's' between two 'e'.

Input: s1 = "gfg", s2 = "gfg"
Output: 0
Explanation: Both strings are same.

Input: s1 = "abc", s2 = "def"
Output: 3
Explanation: All characters need to be replaced to convert str1 to str2, requiring 3 replacement operations.

Constraints:
1 ≤ s1.length(), s2.length() ≤ 103
Both the strings are in lowercase.


Solution Code:-

class Solution {
    public int editDistance(String s1, String s2) {
        // Code here
        int m=s1.length(), n=s2.length();
        int[][] dp=new int[m][n];
        for(int[] d:dp)Arrays.fill(d, Integer.MAX_VALUE);
        return help(s1, s2, 0, 0, dp);
    }
int help(String s1, String s2, int i, int j, int[][] dp){
    int m=s1.length(), n=s2.length();
    if(i==m && j==n)return 0;
    else if(i==m)return n-j;
    else if(j==n)return m-i;
    if(dp[i][j]!=Integer.MAX_VALUE)return dp[i][j];
    int ans=Integer.MAX_VALUE;
   if(s1.charAt(i)!=s2.charAt(j)){ ans=Math.min(ans, 1+help(s1, s2, i+1, j, dp));
    ans=Math.min(ans, 1+help(s1, s2, i, j+1, dp));
    ans=Math.min(ans, 1+help(s1, s2, i+1, j+1, dp));}
    else{
       ans=Math.min(ans, help(s1,s2, i+1, j+1, dp));
    }
    return dp[i][j]=ans;
}
}
